import 'package:floor/floor.dart';
import 'CustomerDAO.dart';
import 'CustomerDatabase.dart';
import 'package:sqflite/sqflite.dart' as sqflite;
import 'package:floor/floor.dart';


/// Represents a customer entity in the database.
///
/// The [Customer] class defines the structure of the customer data, including
/// fields for the customer's ID, first name, last name, address, and birthday.
/// It includes methods to convert between the object and a map representation,
/// and to handle birthday as a `DateTime` object.
@Entity(tableName: 'Customer')
class Customer {

  /// The unique identifier for the customer. Auto-generated by the database.
  @PrimaryKey(autoGenerate: true)
  final int? id;
  /// The first name of the customer.
  final String firstName;
  /// The last name of the customer.
  final String lastName;
  /// The address of the customer.
  final String address;
  /// The birthday of the customer, stored as a `String` in ISO 8601 format.
  final String birthday; // Store as String

  /// Creates a [Customer] instance with the given parameters.
  ///
  /// [id] is optional and will be auto-generated if not provided.
  /// [firstName], [lastName], [address], and [birthday] are required parameters.
  Customer({
    required this.id,
    required this.firstName,
    required this.lastName,
    required this.address,
    required this.birthday, // Pass as String
  });

  /// Converts the [birthday] string to a [DateTime] object.
  ///
  /// Returns the [DateTime] representation of the birthday.
  DateTime get birthdayDateTime => DateTime.parse(birthday);

  /// Converts the [birthdayDateTime] to a string in ISO 8601 format.
  ///
  /// Returns the ISO 8601 string representation of the [birthdayDateTime].
  String get birthdayString => birthdayDateTime.toIso8601String();

  /// Converts the [Customer] object to a map.
  ///
  /// This map can be used for database operations or other purposes that require
  /// a map representation of the customer data.
  ///
  /// Returns a [Map<String, dynamic>] where keys are the names of the fields
  /// and values are the corresponding values of the fields.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'firstName': firstName,
      'lastName': lastName,
      'address': address,
      'birthday': birthdayString,
    };
  }

  /// Creates a [Customer] object from a map.
  ///
  /// The map should contain keys that match the fields of the [Customer] class.
  /// Assumes that the `birthday` field in the map is a string.
  ///
  /// [map] is a [Map<String, dynamic>] where keys are the names of the fields
  /// and values are the corresponding values of the fields.
  ///
  /// Returns a [Customer] object initialized with the values from the map.
  factory Customer.fromMap(Map<String, dynamic> map) {
    return Customer(
      id: map['id'],
      firstName: map['firstName'],
      lastName: map['lastName'],
      address: map['address'],
      birthday: map['birthday'], // Assume it's a String
    );
  }
}
